{"version":3,"sources":["apollo/queries.ts","apollo/mutations.ts","helpers/index.ts","components/Note/index.tsx","components/modals/NoteModal/index.tsx","components/modals/modalStates.ts","components/DueNote/index.tsx","appConfig.ts","components/modals/DueNoteModal/index.tsx","components/AddButtons/index.tsx","components/QueryError/index.tsx","components/Loading/index.tsx","components/AllNotes/index.tsx","components/modals/AddModals/index.tsx","components/App/index.tsx","apollo/client.ts","index.tsx"],"names":["ALL_NOTES","gql","GET_OPEN_MODAL","SET_OPEN_MODAL","ADD_NOTE","ADD_DUE_NOTE","DELETE_NOTE","DELETE_DUE_NOTE","pad","num","str","length","getDateComponents","timestamp","d","Date","year","getFullYear","month","getMonth","date","getDate","keys","Object","capitalizeFirst","word","toUpperCase","substring","capitalize","split","map","join","inputToLocalTimestamp","dateInput","parseInt","getTime","Note","id","text","useState","queryError","setQueryError","useMutation","refetchQueries","query","deleteNote","loading","error","handleDelete","useCallback","window","confirm","variables","then","catch","key","className","onClick","disabled","NoteModal","openModal","useQuery","data","setOpenModal","addNote","setText","buttonText","setButtonText","handleChange","e","currentTarget","value","handleSubmit","style","color","appConfig","note","backgroundColor","placeholder","type","onChange","DueNote","due_timestamp","overdue","now","deleteDueNote","separator","dateFromTimestamp","name","dataSource","displayComponent","modalComponent","dueNote","addDueNote","threeDayMilliseconds","inThreeDays","setDate","handleTextChange","handleDateChange","dateString","alreadyPast","localTimestamp","isPast","htmlFor","AddButtons","configType","config","QueryError","Loading","role","aria-label","AllNotes","allNotes","undefined","typeData","DisplayComponent","AddModals","ModalComponent","App","cache","InMemoryCache","writeData","client","ApolloClient","uri","resolvers","Mutation","_root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.089de272.chunk.js","sourcesContent":["import { gql, ApolloError } from 'apollo-boost'\n\nexport interface Note {\n  id: string\n  text: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface DueNote {\n  id: string\n  text: string\n  due_timestamp: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface AllNotesData {\n  notes: Note[]\n  due_notes: DueNote[]\n}\n\nexport interface AllNotesQuery {\n  loading?: boolean\n  error?: ApolloError | undefined\n  data: AllNotesData | undefined\n}\n\nexport const ALL_NOTES = gql`\n  {\n    notes {\n      id\n      text\n      created_at\n      updated_at\n    }\n    due_notes {\n      id\n      text\n      due_timestamp\n      created_at\n      updated_at\n    }\n  }\n`\n\nexport interface GetOpenModalQuery {\n  data: {\n    openModal: string\n  }\n}\n\nexport const GET_OPEN_MODAL = gql`\n  {\n    openModal @client\n  }\n`\n","import { gql } from 'apollo-boost'\n\nexport const SET_OPEN_MODAL = gql`\n  mutation SetOpenModal($openModal: string) {\n    setOpenModal(openModal: $openModal) @client\n  }\n`\n\nexport const ADD_NOTE = gql`\n  mutation AddNote($text: String!) {\n    insert_notes(objects: { text: $text }) {\n      returning {\n        id\n      }\n    }\n  }\n`\n\nexport const ADD_DUE_NOTE = gql`\n  mutation AddDueNote($text: String!, $due_timestamp: numeric!) {\n    insert_due_notes(objects: { text: $text, due_timestamp: $due_timestamp }) {\n      returning {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_NOTE = gql`\n  mutation DeleteNote($id: uuid) {\n    delete_notes(where: { id: { _eq: $id } }) {\n      affected_rows\n    }\n  }\n`\n\nexport const DELETE_DUE_NOTE = gql`\n  mutation DeleteDueNote($id: uuid) {\n    delete_due_notes(where: { id: { _eq: $id } }) {\n      affected_rows\n    }\n  }\n`\n","export const pad = (num: number): string => {\n  const str = `${num}`\n  return str.length === 1 ? `0${str}` : str\n}\n\nconst getDateComponents = (\n  timestamp: number\n): { year: string; month: string; date: string } => {\n  const d = new Date(timestamp)\n  return {\n    year: `${d.getFullYear()}`,\n    month: pad(d.getMonth() + 1),\n    date: pad(d.getDate()),\n  }\n}\n\nexport const dateFromTimestamp = (\n  timestamp: number,\n  separator = '/'\n): string => {\n  const { year, month, date } = getDateComponents(timestamp)\n  return `${month}${separator}${date}${separator}${year}`\n}\n\nexport const keys = Object.keys as <T>(o: T) => Extract<keyof T, string>[]\n\nexport const capitalizeFirst = (word: string): string => {\n  return `${word[0].toUpperCase()}${word.substring(1)}`\n}\n\nexport const capitalize = (str: string): string => {\n  return str\n    .split(' ')\n    .map((word): string => {\n      return capitalizeFirst(word)\n    })\n    .join(' ')\n}\n\nexport const inThreeDays = (now = Date.now()): string => {\n  const threeDayMilliseconds = 3 * 24 * 60 * 60 * 1000\n  const inThreeDays = now + threeDayMilliseconds\n  const { year, month, date } = getDateComponents(inThreeDays)\n  return `${year}-${month}-${date}`\n}\n\nexport const inputToLocalTimestamp = (dateInput: string): number => {\n  const [year, month, date] = dateInput.split('-')\n  const localTimestamp = new Date(\n    parseInt(year),\n    parseInt(month) - 1,\n    parseInt(date)\n  ).getTime()\n  return localTimestamp\n}\n\nexport const isPast = (dateInput: string): boolean => {\n  const localTimestamp = inputToLocalTimestamp(dateInput)\n  const now = Date.now()\n  return now > localTimestamp\n}\n","import React, { FC, useCallback, useState } from 'react'\nimport 'components/Note/styles.css'\nimport 'components/AllNotes/styles.css'\nimport { Note as NoteType, ALL_NOTES } from 'apollo/queries'\nimport { DELETE_NOTE } from 'apollo/mutations'\nimport { useMutation } from '@apollo/react-hooks'\nimport { capitalizeFirst } from 'helpers'\n\nconst Note: FC<NoteType> = ({ id, text }: NoteType): JSX.Element => {\n  const [queryError, setQueryError] = useState(false)\n  const [deleteNote, { loading, error }] = useMutation(DELETE_NOTE, {\n    refetchQueries: [\n      {\n        query: ALL_NOTES,\n      },\n    ],\n  })\n\n  const handleDelete = useCallback((): void => {\n    if (window.confirm('Delete Note? This cannot be undone.')) {\n      deleteNote({ variables: { id } })\n        .then((): void => {\n          setQueryError(false)\n        })\n        .catch((): void => {\n          setQueryError(true)\n        })\n    }\n  }, [deleteNote, id])\n\n  return (\n    <div key={id} className='note-item'>\n      {capitalizeFirst(text)}\n      {(error || queryError) && (\n        <div className='note-error'>Error, please try again.</div>\n      )}\n      <button\n        className='note-item-delete'\n        onClick={handleDelete}\n        disabled={loading}>\n        {loading ? '...' : '✕'}\n      </button>\n    </div>\n  )\n}\n\nexport default Note\n","import React, { FC, useState, useCallback } from 'react'\nimport 'components/modals/NoteModal/styles.css'\nimport 'components/modals/styles.css'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { GET_OPEN_MODAL, GetOpenModalQuery, ALL_NOTES } from 'apollo/queries'\nimport { SET_OPEN_MODAL, ADD_NOTE } from 'apollo/mutations'\nimport { NOTE_OPEN, CLOSED } from 'components/modals/modalStates'\nimport appConfig from 'appConfig'\n\nconst NoteModal: FC = (): JSX.Element => {\n  const {\n    data: { openModal },\n  } = useQuery(GET_OPEN_MODAL) as GetOpenModalQuery\n  const [setOpenModal] = useMutation(SET_OPEN_MODAL)\n  const [addNote, { loading, error }] = useMutation(ADD_NOTE, {\n    refetchQueries: [\n      {\n        query: ALL_NOTES,\n      },\n    ],\n  })\n  const [text, setText] = useState('')\n  const [buttonText, setButtonText] = useState('Make Note ✓')\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>): void => {\n      setText(e.currentTarget.value)\n    },\n    []\n  )\n\n  const handleSubmit = useCallback((): void => {\n    addNote({ variables: { text } })\n      .then((): void => {\n        setOpenModal({ variables: { openModal: CLOSED } })\n        setText('')\n      })\n      .catch((): void => {\n        setButtonText('Retry Make Note')\n      })\n  }, [text, addNote, setOpenModal])\n\n  return openModal === NOTE_OPEN ? (\n    <div className='modal-container'>\n      <h1\n        className='modal-header'\n        style={{\n          color: appConfig.note.backgroundColor,\n        }}>\n        Add a new Note\n      </h1>\n      <div className='modal-body'>\n        <input\n          className='text-input'\n          placeholder='Note Text'\n          type='text'\n          onChange={handleChange}\n          value={text}\n        />\n        {error && (\n          <div className='modal-error'>\n            Something went wrong, please try again\n          </div>\n        )}\n      </div>\n      <div className='modal-buttons'>\n        <button\n          className='btn'\n          onClick={(): void => {\n            setOpenModal({ variables: { openModal: CLOSED } })\n          }}>\n          Cancel ✕\n        </button>\n        <button\n          className='btn btn-success'\n          onClick={handleSubmit}\n          disabled={text === '' || loading}>\n          {loading ? 'Sending...' : buttonText}\n        </button>\n      </div>\n    </div>\n  ) : (\n    <></>\n  )\n}\n\nexport default NoteModal\n","export const CLOSED = 'closed'\nexport const NOTE_OPEN = 'note'\nexport const DUE_NOTE_OPEN = 'dueNote'\n","import React, { FC, useCallback, useState } from 'react'\nimport 'components/DueNote/styles.css'\nimport 'components/AllNotes/styles.css'\nimport { DueNote as DueNoteType, ALL_NOTES } from 'apollo/queries'\nimport { dateFromTimestamp, capitalizeFirst } from 'helpers'\nimport { DELETE_DUE_NOTE } from 'apollo/mutations'\nimport { useMutation } from '@apollo/react-hooks'\n\nconst DueNote: FC<DueNoteType> = ({\n  id,\n  text,\n  due_timestamp,\n}: DueNoteType): JSX.Element => {\n  const now = Date.now()\n  const overdue = now > due_timestamp\n\n  const [queryError, setQueryError] = useState(false)\n  const [deleteDueNote, { loading, error }] = useMutation(DELETE_DUE_NOTE, {\n    refetchQueries: [\n      {\n        query: ALL_NOTES,\n      },\n    ],\n  })\n\n  const handleDelete = useCallback((): void => {\n    if (window.confirm('Delete Due Note? This cannot be undone.')) {\n      deleteDueNote({ variables: { id } })\n        .then((): void => {\n          setQueryError(false)\n        })\n        .catch((): void => {\n          setQueryError(true)\n        })\n    }\n  }, [deleteDueNote, id])\n\n  return (\n    <div key={id} className='note-item'>\n      {(error || queryError) && (\n        <div className='note-error'>Error, please try again.</div>\n      )}\n      {capitalizeFirst(text)}\n      <div className='due-note-dates'>\n        {overdue && <div className='due-note-overdue'>Overdue</div>}\n        <div className='due-note-date'>{dateFromTimestamp(due_timestamp)}</div>\n        <button\n          className='note-item-delete'\n          onClick={handleDelete}\n          disabled={loading}>\n          {loading ? '...' : '✕'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default DueNote\n","import Note from 'components/Note'\nimport NoteModal from 'components/modals/NoteModal'\nimport DueNote from 'components/DueNote'\nimport DueNoteModal from 'components/modals/DueNoteModal'\nimport { Note as NoteType, DueNote as DueNoteType } from 'apollo/queries'\n\ninterface NoteTypeConfig {\n  name: string\n  dataSource: 'notes' | 'due_notes'\n  modalComponent: React.FC\n  backgroundColor: string\n}\n\ninterface NoteConfig extends NoteTypeConfig {\n  displayComponent: React.FC<NoteType>\n}\n\ninterface DueNoteConfig extends NoteTypeConfig {\n  displayComponent: React.FC<DueNoteType>\n}\n\ninterface AppConfig {\n  note: NoteConfig\n  dueNote: DueNoteConfig\n}\n\nconst appConfig: AppConfig = {\n  note: {\n    name: 'note',\n    dataSource: 'notes',\n    displayComponent: Note,\n    modalComponent: NoteModal,\n    backgroundColor: '#ff9681',\n  },\n  dueNote: {\n    name: 'due note',\n    dataSource: 'due_notes',\n    displayComponent: DueNote,\n    modalComponent: DueNoteModal,\n    backgroundColor: '#99b4c7',\n  },\n}\n\nexport default appConfig\n","import React, { FC, useState, useCallback } from 'react'\nimport 'components/modals/DueNoteModal/styles.css'\nimport 'components/modals/styles.css'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { GET_OPEN_MODAL, GetOpenModalQuery, ALL_NOTES } from 'apollo/queries'\nimport { SET_OPEN_MODAL, ADD_DUE_NOTE } from 'apollo/mutations'\nimport { DUE_NOTE_OPEN, CLOSED } from 'components/modals/modalStates'\nimport { inThreeDays, isPast, inputToLocalTimestamp } from 'helpers'\nimport appConfig from 'appConfig'\n\nconst DueNoteModal: FC = (): JSX.Element => {\n  const {\n    data: { openModal },\n  } = useQuery(GET_OPEN_MODAL) as GetOpenModalQuery\n  const [setOpenModal] = useMutation(SET_OPEN_MODAL)\n  const [addDueNote, { loading, error }] = useMutation(ADD_DUE_NOTE, {\n    refetchQueries: [\n      {\n        query: ALL_NOTES,\n      },\n    ],\n  })\n  const [text, setText] = useState('')\n  const [date, setDate] = useState(inThreeDays())\n  const [buttonText, setButtonText] = useState('Make Due Note ✓')\n\n  const handleTextChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>): void => {\n      setText(e.currentTarget.value)\n    },\n    []\n  )\n\n  const handleDateChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>): void => {\n      const dateString = e.currentTarget.value\n      setDate(dateString)\n    },\n    []\n  )\n\n  const handleSubmit = useCallback((): void => {\n    const timestamp = inputToLocalTimestamp(date)\n    addDueNote({ variables: { text, due_timestamp: timestamp } })\n      .then((): void => {\n        setOpenModal({ variables: { openModal: CLOSED } })\n        setText('')\n      })\n      .catch((): void => {\n        setButtonText('Retry Make Due Note')\n      })\n  }, [text, addDueNote, setOpenModal, date])\n\n  const alreadyPast = isPast(date)\n\n  return openModal === DUE_NOTE_OPEN ? (\n    <div className='modal-container due-note-modal'>\n      <h1\n        className='modal-header'\n        style={{\n          color: appConfig.dueNote.backgroundColor,\n        }}>\n        Add a new Due Note\n      </h1>\n      <div className='modal-body'>\n        <input\n          className='text-input'\n          placeholder='Note text'\n          type='text'\n          onChange={handleTextChange}\n          value={text}\n        />\n        <label className='due-note-label' htmlFor='dueNoteDate'>\n          Due Date\n        </label>\n        <input\n          className='text-input'\n          id='dueNoteDate'\n          type='date'\n          value={date}\n          onChange={handleDateChange}\n        />\n      </div>\n      {error && (\n        <div className='modal-error due-note-modal-error'>\n          Something went wrong, please try again\n        </div>\n      )}\n      {alreadyPast && (\n        <div className='modal-error due-note-modal-error'>\n          Set due date sometime in the future\n        </div>\n      )}\n      <div className='modal-buttons'>\n        <button\n          className='btn'\n          onClick={(): void => {\n            setOpenModal({ variables: { openModal: CLOSED } })\n          }}>\n          Cancel ✕\n        </button>\n        <button\n          className='btn btn-success'\n          onClick={handleSubmit}\n          disabled={text === '' || alreadyPast || loading}>\n          {loading ? 'Sending...' : buttonText}\n        </button>\n      </div>\n    </div>\n  ) : (\n    <></>\n  )\n}\n\nexport default DueNoteModal\n","import React, { FC } from 'react'\nimport 'components/AddButtons/styles.css'\nimport appConfig from 'appConfig'\nimport { keys, capitalize } from 'helpers'\nimport { useMutation } from '@apollo/react-hooks'\nimport { SET_OPEN_MODAL } from 'apollo/mutations'\n\nconst AddButtons: FC = (): JSX.Element => {\n  const [setOpenModal] = useMutation(SET_OPEN_MODAL)\n\n  return (\n    <div className='header-buttons'>\n      {keys(appConfig).map(\n        (configType): JSX.Element => {\n          const config = appConfig[configType]\n          return (\n            <button\n              className='header-button'\n              key={configType}\n              onClick={(): void => {\n                setOpenModal({ variables: { openModal: configType } })\n              }}\n              style={{\n                backgroundColor: config.backgroundColor,\n              }}>\n              Add a new {capitalize(config.name)}\n            </button>\n          )\n        }\n      )}\n    </div>\n  )\n}\n\nexport default AddButtons\n","import React, { FC } from 'react'\nimport 'components/QueryError/styles.css'\n\nconst QueryError: FC = (): JSX.Element => {\n  return (\n    <div className='query-error'>\n      Error fetching notes. Please refresh to retry.\n    </div>\n  )\n}\n\nexport default QueryError\n","import React, { FC } from 'react'\nimport 'components/Loading/styles.css'\n\nconst Loading: FC = (): JSX.Element => {\n  return (\n    <div className='loading-container'>\n      Loading...{' '}\n      <span role='img' aria-label='loading' className='loading-icon'>\n        🌀\n      </span>\n    </div>\n  )\n}\n\nexport default Loading\n","import React, { FC } from 'react'\nimport 'components/AllNotes/styles.css'\nimport { useQuery } from '@apollo/react-hooks'\nimport { ALL_NOTES, AllNotesQuery, Note, DueNote } from 'apollo/queries'\nimport QueryError from 'components/QueryError'\nimport Loading from 'components/Loading'\nimport { keys, capitalize } from 'helpers'\nimport appConfig from 'appConfig'\n\nconst AllNotes: FC = (): JSX.Element => {\n  const allNotes: AllNotesQuery = useQuery(ALL_NOTES)\n  const { loading, error, data } = allNotes\n\n  if (loading) return <Loading />\n  if (error) return <QueryError />\n  return data === undefined ? (\n    <QueryError />\n  ) : (\n    <div className='all-notes-container'>\n      {keys(appConfig).map(\n        (configType): JSX.Element => {\n          const config = appConfig[configType]\n          const typeData: Array<Note | DueNote> = data[config.dataSource]\n          return (\n            <div className='notes-container' key={configType}>\n              <h2 className='collection-header'>\n                {capitalize(config.name)} Collection\n              </h2>\n              {typeData.map(\n                (note): JSX.Element => {\n                  const DisplayComponent = config.displayComponent\n                  /* eslint-disable-next-line */\n                  return <DisplayComponent key={note.id} {...(note as any)} />\n                }\n              )}\n            </div>\n          )\n        }\n      )}\n    </div>\n  )\n}\n\nexport default AllNotes\n","import React, { FC } from 'react'\nimport 'components/modals/AddModals/styles.css'\nimport appConfig from 'appConfig'\nimport { keys } from 'helpers'\nimport { useQuery } from '@apollo/react-hooks'\nimport { GET_OPEN_MODAL, GetOpenModalQuery } from 'apollo/queries'\nimport { CLOSED } from 'components/modals/modalStates'\n\nconst AddModals: FC = (): JSX.Element => {\n  const {\n    data: { openModal },\n  } = useQuery(GET_OPEN_MODAL) as GetOpenModalQuery\n\n  return (\n    <>\n      {openModal !== CLOSED && <div className={'modal-overlay'} />}\n      {keys(appConfig).map(\n        (configType): JSX.Element => {\n          const config = appConfig[configType]\n          const ModalComponent = config.modalComponent\n          return <ModalComponent key={configType} />\n        }\n      )}\n    </>\n  )\n}\n\nexport default AddModals\n","import React, { FC } from 'react'\nimport 'components/App/styles.css'\nimport AddButtons from 'components/AddButtons'\nimport AllNotes from 'components/AllNotes'\nimport AddModals from 'components/modals/AddModals'\n\nconst App: FC = (): JSX.Element => {\n  return (\n    <>\n      <AddButtons />\n      <AllNotes />\n      <AddModals />\n    </>\n  )\n}\n\nexport default App\n","import ApolloClient from 'apollo-boost'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nconst cache = new InMemoryCache()\n\ncache.writeData({\n  data: {\n    openModal: 'closed',\n  },\n})\n\nexport const client = new ApolloClient({\n  cache,\n  uri: 'https://tt-notes-dev.herokuapp.com/v1/graphql',\n  resolvers: {\n    Mutation: {\n      setOpenModal: (_root, variables, { cache }): void => {\n        const { openModal } = variables\n        cache.writeData({ data: { openModal } })\n      },\n    },\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'index.css'\nimport App from 'components/App'\nimport { client } from 'apollo/client'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nconst ApolloApp = (): JSX.Element => {\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  )\n}\n\nReactDOM.render(<ApolloApp />, document.getElementById('root'))\n"],"sourceRoot":""}